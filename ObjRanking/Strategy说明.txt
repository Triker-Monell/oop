Strategy说明
作者――张鸣昊（Debug过程：三人共同完成）

设计思路：面对爬虫爬取的冗杂的信息，想要处理清晰并且存入需要的数据基类中便需要很复杂的算法过程（主要是字符串处理）。因此，作者考虑采用策略模式的思路，实际上只是把各个目标字符串所需的算法过程整理到对应的strategy里，这样会使BaseObject调用时，只需要一个BaseStrategy指针，大大减少了代码冗杂程度。

结构：与Catcher相似，一个Base基类对应三个网站的三个不同目标（排行榜特殊处理，见Catcher说明），共九个派生类。
工作过程：每个派生类使用时，都会在exec（执行）函数里，先调用BaseCatcher对应的MakeCatcher函数爬取信息，再用SaveinObject函数将信息读入ifstream（readfile）中，然后根据情况不同，定义了多个局部变量，临时用来储存分割得到的信息，准备存进Basedata中。当处理完后，自动清空txt内容，便于下次使用。这是，Strategy会new出一系列BaseData*来读取临时变量信息，然后push_back进需要进入的BaseObject的vector中。其中complexData用来存“可以进一步爬取（在用户界面上可以点击）”的信息，simpleData用来储存仅仅可以显示的信息。以上就是Strategy工作流程。

说明：
1.Strategy可以说是建立在Catcher和Object之间的重要桥梁，采用的设计模式作者认为较为恰当。虽然原理简单，但是有着不可忽视的作用。
2.Strategy内的代码虽然不易看懂，但是其工作极为简单，即分割字符串成为一个个需要的数据，作者认为与py文件一样，不必过于在意具体如何实现，只需要理解其功能，便可以清晰理解整个程序框架。
3.由于网页信息格式多变，在测试程序中出现了许多由于网页源代码在同一处却表现不同的情况，作者尽可能的设计处理过程，增加判断条件，以防出现爬取不到的情况。但是，由于测试样例数量有限，可能有我们没有发现的特殊之处，这也是我们的不足之一。
